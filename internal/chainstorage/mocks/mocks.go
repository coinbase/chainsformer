// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/coinbase/chainsformer/internal/chainstorage (interfaces: Session)
//
// Generated by this command:
//
//	mockgen -destination internal/chainstorage/mocks/mocks.go -package chainstoragemocks github.com/coinbase/chainsformer/internal/chainstorage Session
//

// Package chainstoragemocks is a generated GoMock package.
package chainstoragemocks

import (
	context "context"
	reflect "reflect"

	chainstorage "github.com/coinbase/chainstorage/protos/coinbase/chainstorage"
	sdk "github.com/coinbase/chainstorage/sdk"
	gomock "go.uber.org/mock/gomock"
)

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// Client mocks base method.
func (m *MockSession) Client() sdk.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(sdk.Client)
	return ret0
}

// Client indicates an expected call of Client.
func (mr *MockSessionMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockSession)(nil).Client))
}

// GetEventSequenceByPosition mocks base method.
func (m *MockSession) GetEventSequenceByPosition(arg0 context.Context, arg1 string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventSequenceByPosition", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventSequenceByPosition indicates an expected call of GetEventSequenceByPosition.
func (mr *MockSessionMockRecorder) GetEventSequenceByPosition(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventSequenceByPosition", reflect.TypeOf((*MockSession)(nil).GetEventSequenceByPosition), arg0, arg1)
}

// GetStartHeight mocks base method.
func (m *MockSession) GetStartHeight(arg0 context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStartHeight", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStartHeight indicates an expected call of GetStartHeight.
func (mr *MockSessionMockRecorder) GetStartHeight(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStartHeight", reflect.TypeOf((*MockSession)(nil).GetStartHeight), arg0)
}

// GetStaticChainMetadata mocks base method.
func (m *MockSession) GetStaticChainMetadata(arg0 context.Context, arg1 *chainstorage.GetChainMetadataRequest) (*chainstorage.GetChainMetadataResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaticChainMetadata", arg0, arg1)
	ret0, _ := ret[0].(*chainstorage.GetChainMetadataResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaticChainMetadata indicates an expected call of GetStaticChainMetadata.
func (mr *MockSessionMockRecorder) GetStaticChainMetadata(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaticChainMetadata", reflect.TypeOf((*MockSession)(nil).GetStaticChainMetadata), arg0, arg1)
}

// GetTipHeight mocks base method.
func (m *MockSession) GetTipHeight(arg0 context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTipHeight", arg0)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTipHeight indicates an expected call of GetTipHeight.
func (mr *MockSessionMockRecorder) GetTipHeight(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTipHeight", reflect.TypeOf((*MockSession)(nil).GetTipHeight), arg0)
}

// Parser mocks base method.
func (m *MockSession) Parser() sdk.Parser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parser")
	ret0, _ := ret[0].(sdk.Parser)
	return ret0
}

// Parser indicates an expected call of Parser.
func (mr *MockSessionMockRecorder) Parser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parser", reflect.TypeOf((*MockSession)(nil).Parser))
}
