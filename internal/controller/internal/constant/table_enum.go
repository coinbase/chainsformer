// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package constant

import (
	"fmt"
)

const (
	// EncodingNone is a Encoding of type None.
	EncodingNone Encoding = iota
	// EncodingRaw is a Encoding of type Raw.
	EncodingRaw
)

const _EncodingName = "noneraw"

var _EncodingMap = map[Encoding]string{
	EncodingNone: _EncodingName[0:4],
	EncodingRaw:  _EncodingName[4:7],
}

// String implements the Stringer interface.
func (x Encoding) String() string {
	if str, ok := _EncodingMap[x]; ok {
		return str
	}
	return fmt.Sprintf("Encoding(%d)", x)
}

var _EncodingValue = map[string]Encoding{
	_EncodingName[0:4]: EncodingNone,
	_EncodingName[4:7]: EncodingRaw,
}

// ParseEncoding attempts to convert a string to a Encoding.
func ParseEncoding(name string) (Encoding, error) {
	if x, ok := _EncodingValue[name]; ok {
		return x, nil
	}
	return Encoding(0), fmt.Errorf("%s is not a valid Encoding", name)
}

// MarshalText implements the text marshaller method.
func (x Encoding) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Encoding) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseEncoding(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

const (
	// TableFormatNative is a TableFormat of type Native.
	TableFormatNative TableFormat = iota
	// TableFormatRosetta is a TableFormat of type Rosetta.
	TableFormatRosetta
)

const _TableFormatName = "nativerosetta"

var _TableFormatMap = map[TableFormat]string{
	TableFormatNative:  _TableFormatName[0:6],
	TableFormatRosetta: _TableFormatName[6:13],
}

// String implements the Stringer interface.
func (x TableFormat) String() string {
	if str, ok := _TableFormatMap[x]; ok {
		return str
	}
	return fmt.Sprintf("TableFormat(%d)", x)
}

var _TableFormatValue = map[string]TableFormat{
	_TableFormatName[0:6]:  TableFormatNative,
	_TableFormatName[6:13]: TableFormatRosetta,
}

// ParseTableFormat attempts to convert a string to a TableFormat.
func ParseTableFormat(name string) (TableFormat, error) {
	if x, ok := _TableFormatValue[name]; ok {
		return x, nil
	}
	return TableFormat(0), fmt.Errorf("%s is not a valid TableFormat", name)
}

// MarshalText implements the text marshaller method.
func (x TableFormat) MarshalText() ([]byte, error) {
	return []byte(x.String()), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *TableFormat) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseTableFormat(name)
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
