// Code generated by MockGen. DO NOT EDIT.
// Source: internal/controller/internal/table.go
//
// Generated by this command:
//
//	mockgen -destination internal/controller/mocks/table_mocks.go -package controllermocks -source=internal/controller/internal/table.go
//

// Package controllermocks is a generated GoMock package.
package controllermocks

import (
	context "context"
	reflect "reflect"

	arrow "github.com/apache/arrow/go/v10/arrow"
	flight "github.com/apache/arrow/go/v10/arrow/flight"
	constant "github.com/coinbase/chainsformer/internal/controller/internal/constant"
	xarrow "github.com/coinbase/chainsformer/internal/utils/xarrow"
	chainsformer "github.com/coinbase/chainsformer/protos/coinbase/chainsformer"
	gomock "go.uber.org/mock/gomock"
)

// MockTable is a mock of Table interface.
type MockTable struct {
	ctrl     *gomock.Controller
	recorder *MockTableMockRecorder
}

// MockTableMockRecorder is the mock recorder for MockTable.
type MockTableMockRecorder struct {
	mock *MockTable
}

// NewMockTable creates a new mock instance.
func NewMockTable(ctrl *gomock.Controller) *MockTable {
	mock := &MockTable{ctrl: ctrl}
	mock.recorder = &MockTableMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTable) EXPECT() *MockTableMockRecorder {
	return m.recorder
}

// DoGet mocks base method.
func (m *MockTable) DoGet(ctx context.Context, cmd *chainsformer.GetFlightInfoCmd, tableWriter xarrow.TableWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoGet", ctx, cmd, tableWriter)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoGet indicates an expected call of DoGet.
func (mr *MockTableMockRecorder) DoGet(ctx, cmd, tableWriter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoGet", reflect.TypeOf((*MockTable)(nil).DoGet), ctx, cmd, tableWriter)
}

// GetEndpoints mocks base method.
func (m *MockTable) GetEndpoints(ctx context.Context, cmd *chainsformer.GetFlightInfoCmd) ([]*flight.FlightEndpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpoints", ctx, cmd)
	ret0, _ := ret[0].([]*flight.FlightEndpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndpoints indicates an expected call of GetEndpoints.
func (mr *MockTableMockRecorder) GetEndpoints(ctx, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpoints", reflect.TypeOf((*MockTable)(nil).GetEndpoints), ctx, cmd)
}

// GetFormat mocks base method.
func (m *MockTable) GetFormat() constant.TableFormat {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFormat")
	ret0, _ := ret[0].(constant.TableFormat)
	return ret0
}

// GetFormat indicates an expected call of GetFormat.
func (mr *MockTableMockRecorder) GetFormat() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFormat", reflect.TypeOf((*MockTable)(nil).GetFormat))
}

// GetSchema mocks base method.
func (m *MockTable) GetSchema() *arrow.Schema {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSchema")
	ret0, _ := ret[0].(*arrow.Schema)
	return ret0
}

// GetSchema indicates an expected call of GetSchema.
func (mr *MockTableMockRecorder) GetSchema() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSchema", reflect.TypeOf((*MockTable)(nil).GetSchema))
}

// GetTableName mocks base method.
func (m *MockTable) GetTableName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTableName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTableName indicates an expected call of GetTableName.
func (mr *MockTableMockRecorder) GetTableName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTableName", reflect.TypeOf((*MockTable)(nil).GetTableName))
}
